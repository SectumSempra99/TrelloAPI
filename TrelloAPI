{
	"info": {
		"_postman_id": "88fcf665-4e35-453f-a430-7989c33d310d",
		"name": "Trello API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19354289"
	},
	"item": [
		{
			"name": "Create A New Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Card should preserve properties\", function () {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get('myBoardName'));\r",
							"    pm.expect(response.closed).to.eql(false);;\r",
							"});\r",
							"\r",
							"pm.test(\"Card Id Has Been Set\", function () {\r",
							"    pm.environment.set(\"boardId\", response.id);\r",
							"  \r",
							"});\r",
							"postman.setNextRequest(\"Create A New List TODO\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"myBoardName\", getRandomBoardName());\r",
							"\r",
							"function getRandomBoardName(){\r",
							"    const boardName = \"My Board Name \" + parseInt(Math.random() * 1000);\r",
							"    console.log(boardName);\r",
							"    return boardName;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/?name={{myBoardName}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{myBoardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				},
				"description": "**Membuat papan baru harus menggunakan token dan key yang di generate di trello**"
			},
			"response": []
		},
		{
			"name": "Update A Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Boards Status Has Change\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.eql(true);\r",
							"   \r",
							"    \r",
							";\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}&closed=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "closed",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response body\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Get the first object (element) from jsonData array\r",
							"var firstBoard = jsonData.shift();\r",
							"\r",
							"\r",
							"\r",
							"if (firstBoard) {\r",
							"    // Print the value\r",
							"    console.log(firstBoard.id);\r",
							"    \r",
							"    // Set the variable boardId with the first board id from the list retrieved\r",
							"    pm.environment.set(\"boardId\", firstBoard.id);\r",
							"    \r",
							"    // Set the next request to the delete board\r",
							"    postman.setNextRequest(pm.environment.get(\"deleteBoardRequestId\"));\r",
							"} else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/1/members/me/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "Test API",
							"disabled": true
						}
					]
				},
				"description": "Menampilkan semua Board sesuai dengan query parameter"
			},
			"response": []
		},
		{
			"name": "Get Single Board",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "639e08f9c86e4703105e7beb"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete A Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.set(\"deleteBoardRequestId\", pm.info.requestId); \r",
							"\r",
							"postman.setNextRequest(\"Get All Board\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				},
				"description": "Menghapus papan kerja sesuai dengan parameter"
			},
			"response": []
		},
		{
			"name": "Create A New List TODO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Card should preserve properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"TODO\");\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"    \r",
							";\r",
							"});\r",
							"\r",
							"pm.test(\"List Id Has Been Set\", function () {\r",
							"    pm.environment.set(\"listId\", response.id);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Create A New List DONE\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?key={{trelloKey}}&token={{trelloToken}}&name=TODO&idBoard={{boardId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						}
					]
				},
				"description": "Untuk membuat daftar harus memasukan parameter key dan token serta harus memasukan idBoard yang mana akan menentukan di papan mana daftar akan disimpan"
			},
			"response": []
		},
		{
			"name": "Create A New List DONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Card should preserve properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"DONE\");\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"    \r",
							";\r",
							"});\r",
							"\r",
							"pm.test(\"List Id Has Been Set\", function () {\r",
							"    pm.environment.set(\"listId2\", response.id);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Create A New Cards\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?key={{trelloKey}}&token={{trelloToken}}&name=DONE&idBoard={{boardId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "DONE"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						}
					]
				},
				"description": "Untuk membuat daftar harus memasukan parameter key dan token serta harus memasukan idBoard yang mana akan menentukan di papan mana daftar akan disimpan"
			},
			"response": []
		},
		{
			"name": "Update A List",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1//lists/:id?key={{trelloKey}}&token={{trelloToken}}&name=todo",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"",
						"lists",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "closed",
							"value": "true",
							"disabled": true
						},
						{
							"key": "name",
							"value": "todo"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{listId2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive  a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"List Status Has Change\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.eql(true);\r",
							"   \r",
							"    \r",
							";\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/lists/:id/closed?key={{trelloKey}}&token={{trelloToken}}&value=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"lists",
						":id",
						"closed"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "value",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Unarchive A List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"List Status Has Change\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"   \r",
							"    \r",
							";\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/lists/:id/closed?key={{trelloKey}}&token={{trelloToken}}&value=false",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"lists",
						":id",
						"closed"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "value",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Single List",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/lists/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"lists",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{listId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create A New Cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Card should preserve properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Learn Postman New\");\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"    \r",
							";\r",
							"});\r",
							"pm.test(\"Card Id Has Been Set\", function () {\r",
							"    pm.environment.set(\"cardsId\", response.id);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Update A Cards\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards?key={{trelloKey}}&token={{trelloToken}}&name=Learn Postman New&desc=learn postman for being QA Engineers&due=2022-12-30&idList={{listId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "Learn Postman New"
						},
						{
							"key": "desc",
							"value": "learn postman for being QA Engineers"
						},
						{
							"key": "due",
							"value": "2022-12-30"
						},
						{
							"key": "idList",
							"value": "{{listId}}"
						}
					]
				},
				"description": "Untuk membuat cards kita harus memasukan listId yang mana itu akan menentukan didaftar mana cards akan disimpan"
			},
			"response": []
		},
		{
			"name": "Get A Single Cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Cards Found\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"cardsId\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{cardsId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update A Cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Card should preserve properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Learn Postman\");\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"    pm.expect(jsonData.idBoard).to.eql(pm.environment.get('boardId'));\r",
							";\r",
							"});\r",
							"\r",
							"pm.test(\"The Cards Move To DONE\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.idList).to.eql(pm.environment.get('listId'));\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Delete A Board\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&Name=Learn Postman&idList={{listId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "Name",
							"value": "Learn Postman"
						},
						{
							"key": "closed",
							"value": "false",
							"disabled": true
						},
						{
							"key": "idList",
							"value": "{{listId}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{cardsId}}",
							"type": "string"
						}
					]
				},
				"description": "Endpoint ini dapat memindahkan cards dari TODO ke DONE atau pun sebalik nya tergantung parameter yang diinpu"
			},
			"response": []
		},
		{
			"name": "Delete A Cards",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{cardsId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.trello.com",
			"type": "string"
		},
		{
			"key": "trelloKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "trelloToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "listId",
			"value": ""
		},
		{
			"key": "listId2",
			"value": ""
		}
	]
}